{
  "address": "0x578a80AD3f6D56f873da81b73B8D192aB6BfB063",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_erc20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amountsToTransfer",
          "type": "uint256[]"
        }
      ],
      "name": "BatchPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "FeeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_erc20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fees",
          "type": "uint256"
        }
      ],
      "name": "FeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountReceived",
          "type": "uint256"
        }
      ],
      "name": "SwapFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        }
      ],
      "name": "SwapRouterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "name": "UpdatedVersion",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MANTISSA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_erc20TokenOrigin",
          "type": "address[]"
        }
      ],
      "name": "approveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSwapV2",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performMultiPayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            }
          ],
          "internalType": "struct Payroll.SwapV2[]",
          "name": "_swaps",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            }
          ],
          "internalType": "struct Payroll.SwapV2[]",
          "name": "_swaps",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV2AndPayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            }
          ],
          "internalType": "struct Payroll.SwapV3[]",
          "name": "_swaps",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            }
          ],
          "internalType": "struct Payroll.SwapV3[]",
          "name": "_swaps",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV3AndPayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "setFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "name": "setVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0a7e2de7b64020aad3867e2d3a1b3a9549939ef49950b99bdd6f8cb2603a906",
  "receipt": {
    "to": null,
    "from": "0x9C95B0EF2D3E1D9ca479524Ba738C87BE28C1585",
    "contractAddress": "0x578a80AD3f6D56f873da81b73B8D192aB6BfB063",
    "transactionIndex": 5,
    "gasUsed": "2265322",
    "logsBloom": "0x
    "blockHash": "0x8872f0340ec58d240029d38e04b01f75ab05c9c6b02ebe25322ebf18f99477d4",
    "transactionHash": "0xc0a7e2de7b64020aad3867e2d3a1b3a9549939ef49950b99bdd6f8cb2603a906",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 27404367,
        "transactionHash": "0xc0a7e2de7b64020aad3867e2d3a1b3a9549939ef49950b99bdd6f8cb2603a906",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009c95b0ef2d3e1d9ca479524ba738c87be28c1585",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000012c193bd17de4c0000000000000000000000000000000000000000000000009de03ac5ca36f7a70000000000000000000000000000000000000000000012a2e0cb92ff4c5fc7920000000000000000000000000000000000000000000000009dcd79320d1f195b0000000000000000000000000000000000000000000012a2e0de54930977a5de",
        "logIndex": 12,
        "blockHash": "0x8872f0340ec58d240029d38e04b01f75ab05c9c6b02ebe25322ebf18f99477d4"
      }
    ],
    "blockNumber": 27404367,
    "cumulativeGasUsed": "2925308",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "9e56125bad004c6eb51ab73b106ad9e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_erc20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amountsToTransfer\",\"type\":\"uint256[]\"}],\"name\":\"BatchPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_erc20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"FeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountReceived\",\"type\":\"uint256\"}],\"name\":\"SwapFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"}],\"name\":\"SwapRouterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"UpdatedVersion\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MANTISSA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address[]\"}],\"name\":\"approveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performMultiPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct Payroll.SwapV2[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct Payroll.SwapV2[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV2AndPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct Payroll.SwapV3[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct Payroll.SwapV3[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV3AndPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"setVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Think and Dev Team\",\"kind\":\"dev\",\"methods\":{\"approveTokens(address[])\":{\"params\":{\"_erc20TokenOrigin\":\"ERC20 token address to approve.\"}},\"initialize(address,bool,address,uint256)\":{\"params\":{\"_isSwapV2\":\"Boolean to specify the version of the router; true means v2, false means v3.\",\"_swapRouter\":\"Router address to execute swaps.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performMultiPayment((address,address[],uint256[])[])\":{\"params\":{\"_payments\":\"The array of the Payment data.\"}},\"performSwapV2(address,uint256,uint32,(uint256,uint256,address[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV2AndPayment(address,uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_payments\":\"The array of the Payment data.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV3(address,uint256,uint32,(uint256,uint256,bytes)[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV3AndPayment(address,uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_payments\":\"The array of the Payment data.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"params\":{\"_fee\":\"Percentage that will be charged.\"}},\"setFeeAddress(address)\":{\"params\":{\"_feeAddress\":\"Address that will receive the fees.\"}},\"setSwapRouter(address,bool)\":{\"params\":{\"_isSwapV2\":\"Boolean to specify the version of the router; true means v2, false means v3.\",\"_swapRouter\":\"Router address to execute swaps.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Think and Dev Paymentbox\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveTokens(address[])\":{\"notice\":\"Approves the following token to be used on swapRouter\"},\"isSwapV2()\":{\"notice\":\"Returns if the contract is working with a v2 Uniswap protocol; true means v2, false means v3.\"},\"performMultiPayment((address,address[],uint256[])[])\":{\"notice\":\"Perform the payments to the given addresses and amounts, public method.\"},\"performSwapV2(address,uint256,uint32,(uint256,uint256,address[])[])\":{\"notice\":\"Perform the swap with Uniswap V2 to the given token addresses and amounts.\"},\"performSwapV2AndPayment(address,uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])\":{\"notice\":\"Perform the swap with Uniswap V2 and the transfer to the given addresses using Uniswap V2 interface.Currently the function only works with ERC20 tokens.\"},\"performSwapV3(address,uint256,uint32,(uint256,uint256,bytes)[])\":{\"notice\":\"Perform the swap with Uniswap V3 to the given token addresses and amounts.\"},\"performSwapV3AndPayment(address,uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])\":{\"notice\":\"Perform the swap with Uniswap V3 and the transfer to the given addresses.Currently the function only works with ERC20 tokens.\"},\"setFee(uint256)\":{\"notice\":\"Set the fee that will be charged, fees are divided by mantissa\"},\"setFeeAddress(address)\":{\"notice\":\"Set the address that will receive the fees.\"},\"setSwapRouter(address,bool)\":{\"notice\":\"Set the SwapRouter and the version to be used.\"},\"swapRouter()\":{\"notice\":\"Returns the address of the Uniswap protocol router, it could be v2 or v3.\"}},\"notice\":\"Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction. Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Payroll.sol\":\"Payroll\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/BytesLib.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity ^0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_start + _length >= _start, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don\\\"t care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we\\\"re done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin\\\"s length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let\\\"s just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, \\\"toAddress_overflow\\\");\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, \\\"toUint24_overflow\\\");\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x10d6970171336bca4c49a63eadbb0aa851b250efc51066ff1ffe77de4254665e\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/Payroll.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC20Basic.sol\\\";\\nimport \\\"./interfaces/IUniswap.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./BytesLib.sol\\\";\\n\\n/**\\n * @title Think and Dev Paymentbox\\n * @author Think and Dev Team\\n * @notice Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction.\\n * Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.\\n */\\ncontract Payroll is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using BytesLib for bytes;\\n    /**\\n     * Returns the address of the Uniswap protocol router, it could be v2 or v3.\\n     */\\n    address public swapRouter;\\n    address public feeAddress;\\n    uint256 public fee;\\n    uint256 public constant MANTISSA = 1e18;\\n    uint256 public version;\\n\\n    /**\\n     * Returns if the contract is working with a v2 Uniswap protocol;\\n     * true means v2, false means v3.\\n     */\\n    bool public isSwapV2;\\n\\n    struct Payment {\\n        address token;\\n        address[] receivers;\\n        uint256[] amountsToTransfer;\\n    }\\n\\n    struct SwapV2 {\\n        uint256 amountOut;\\n        uint256 amountInMax;\\n        address[] path;\\n    }\\n\\n    struct SwapV3 {\\n        uint256 amountOut;\\n        uint256 amountInMax;\\n        bytes path;\\n    }\\n\\n    event SwapRouterChanged(address _swapRouter, bool _isSwapV2);\\n    event FeeChanged(uint256 _fee);\\n    event UpdatedVersion(uint256 _version);\\n    event FeeCharged(address _erc20TokenAddress, address _feeAddress, uint256 _fees);\\n    event FeeAddressChanged(address _feeAddress);\\n    event BatchPayment(address _erc20TokenAddress, address[] _receivers, uint256[] _amountsToTransfer);\\n    event SwapFinished(address _tokenIn, address _tokenOut, uint256 _amountReceived);\\n\\n    /**\\n     * @param _swapRouter Router address to execute swaps.\\n     * @param _isSwapV2 Boolean to specify the version of the router; true means v2, false means v3.\\n     */\\n    function initialize(\\n        address _swapRouter,\\n        bool _isSwapV2,\\n        address _feeAddress,\\n        uint256 _fee\\n    ) public initializer {\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n        _setSwapRouter(_swapRouter, _isSwapV2);\\n        _setFeeAddress(_feeAddress);\\n        _setFee(_fee);\\n        _setVersion(1);\\n    }\\n\\n    /**\\n     * Set the fee that will be charged, fees are divided by mantissa\\n     * @param _fee Percentage that will be charged.\\n     */\\n    function setFee(uint256 _fee) external onlyOwner {\\n        _setFee(_fee);\\n    }\\n\\n    function setVersion(uint256 _version) external onlyOwner {\\n        _setVersion(_version);\\n    }\\n\\n    function _setVersion(uint256 _version) internal {\\n        require(_version > 0, \\\"Payroll: Version can't be 0\\\");\\n        version = _version;\\n        emit UpdatedVersion(_version);\\n    }\\n\\n    function _setFee(uint256 _fee) internal {\\n        require(_fee < 3e16, \\\"Payroll: Fee should be less than 3%\\\");\\n        fee = _fee;\\n        emit FeeChanged(_fee);\\n    }\\n\\n    /**\\n     * Set the address that will receive the fees.\\n     * @param _feeAddress Address that will receive the fees.\\n     */\\n    function setFeeAddress(address _feeAddress) external onlyOwner {\\n        _setFeeAddress(_feeAddress);\\n    }\\n\\n    function _setFeeAddress(address _feeAddress) internal {\\n        require(_feeAddress != address(0), \\\"Payroll: Fee address can't be 0\\\");\\n        feeAddress = _feeAddress;\\n        emit FeeAddressChanged(_feeAddress);\\n    }\\n\\n    /**\\n     * Set the SwapRouter and the version to be used.\\n     * @param _swapRouter Router address to execute swaps.\\n     * @param _isSwapV2 Boolean to specify the version of the router; true means v2, false means v3.\\n     */\\n    function setSwapRouter(address _swapRouter, bool _isSwapV2) external onlyOwner {\\n        _setSwapRouter(_swapRouter, _isSwapV2);\\n    }\\n\\n    function _setSwapRouter(address _swapRouter, bool _isSwapV2) internal {\\n        require(_swapRouter != address(0), \\\"Payroll: Cannot set a 0 address as swapRouter\\\");\\n        isSwapV2 = _isSwapV2;\\n        swapRouter = _swapRouter;\\n        emit SwapRouterChanged(_swapRouter, _isSwapV2);\\n    }\\n\\n    /**\\n     * Approves the following token to be used on swapRouter\\n     * @param _erc20TokenOrigin ERC20 token address to approve.\\n     */\\n    function approveTokens(address[] calldata _erc20TokenOrigin) external nonReentrant {\\n        for (uint256 i = 0; i < _erc20TokenOrigin.length; i++) {\\n            // approves the swapRouter to spend totalAmountToSpend of erc20TokenOrigin\\n            TransferHelper.safeApprove(_erc20TokenOrigin[i], address(swapRouter), type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V3 and the transfer to the given addresses.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @param _payments The array of the Payment data.\\n     * @notice Currently the function only works with ERC20 tokens.\\n     */\\n    function performSwapV3AndPayment(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV3[] calldata _swaps,\\n        Payment[] calldata _payments\\n    ) external payable nonReentrant {\\n        require(!isSwapV2, \\\"Payroll: Not uniswapV3\\\");\\n        if (_swaps.length > 0) {\\n            _performSwapV3(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n        }\\n\\n        _performMultiPayment(_payments);\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V3 to the given token addresses and amounts.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     */\\n    function performSwapV3(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV3[] calldata _swaps\\n    ) external nonReentrant returns (uint256) {\\n        require(!isSwapV2, \\\"Payroll: Not uniswapV3\\\");\\n        require(_swaps.length > 0, \\\"Payroll: Empty swaps\\\");\\n        return _performSwapV3(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V3 to the given token addresses and amounts.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     */\\n    function _performSwapV3(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV3[] calldata _swaps\\n    ) internal returns (uint256) {\\n        // transfer the totalAmountToSpend of erc20TokenOrigin from the msg.sender to this contract\\n        // msg.sender must approve this contract for erc20TokenOrigin\\n        TransferHelper.safeTransferFrom(_erc20TokenOrigin, msg.sender, address(this), _totalAmountToSwap);\\n\\n        uint256 totalAmountIn = 0;\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            require(_swaps[i].path.length > 0, \\\"Payroll: Empty path\\\");\\n            uint256 amountIn = IUniswapV3(swapRouter).exactOutput(\\n                IUniswapV3.ExactOutputParams({\\n                    path: _swaps[i].path,\\n                    recipient: msg.sender,\\n                    deadline: _deadline,\\n                    amountOut: _swaps[i].amountOut,\\n                    amountInMaximum: _swaps[i].amountInMax\\n                })\\n            );\\n            totalAmountIn = totalAmountIn + amountIn;\\n            emit SwapFinished(_erc20TokenOrigin, _swaps[i].path.toAddress(0), amountIn);\\n        }\\n\\n        uint256 leftOver = IERC20Basic(_erc20TokenOrigin).balanceOf(address(this));\\n        if (leftOver > 0) {\\n            // return the leftover of _erc20TokenOrigin\\n            TransferHelper.safeTransfer(_erc20TokenOrigin, msg.sender, leftOver);\\n        }\\n        return totalAmountIn;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, \\\"toAddress_overflow\\\");\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V2 and the transfer to the given addresses using Uniswap V2 interface.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @param _payments The array of the Payment data.\\n     * @notice Currently the function only works with ERC20 tokens.\\n     */\\n    function performSwapV2AndPayment(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV2[] calldata _swaps,\\n        Payment[] calldata _payments\\n    ) external payable nonReentrant {\\n        require(isSwapV2, \\\"Payroll: Not uniswapV2\\\");\\n        if (_swaps.length > 0) {\\n            _performSwapV2(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n        }\\n\\n        _performMultiPayment(_payments);\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V2 to the given token addresses and amounts.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     */\\n    function performSwapV2(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV2[] calldata _swaps\\n    ) external nonReentrant returns (uint256) {\\n        require(isSwapV2, \\\"Payroll: Not uniswapV2\\\");\\n        require(_swaps.length > 0, \\\"Payroll: Empty swaps\\\");\\n        return _performSwapV2(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V2 to the given token addresses and amounts.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     */\\n    function _performSwapV2(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV2[] calldata _swaps\\n    ) internal returns (uint256) {\\n        // transfer the totalAmountToSpend of erc20TokenOrigin from the msg.sender to this contract\\n        // msg.sender must approve this contract for erc20TokenOrigin\\n        TransferHelper.safeTransferFrom(_erc20TokenOrigin, msg.sender, address(this), _totalAmountToSwap);\\n\\n        uint256 totalAmountIn = 0;\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            require(_swaps[i].path.length > 0, \\\"Payroll: Empty path\\\");\\n            require(_swaps[i].path[0] == _erc20TokenOrigin, \\\"Payroll: Swap not token origin\\\");\\n            // return the amount spend of tokenIn\\n            uint256 amountIn = IUniswapV2(swapRouter).swapTokensForExactTokens(\\n                _swaps[i].amountOut,\\n                _swaps[i].amountInMax,\\n                _swaps[i].path,\\n                msg.sender,\\n                _deadline\\n            )[0];\\n            totalAmountIn = totalAmountIn + amountIn;\\n            address[] calldata path = _swaps[i].path;\\n            emit SwapFinished(_erc20TokenOrigin, path[path.length - 1], amountIn);\\n        }\\n\\n        uint256 leftOver = IERC20Basic(_erc20TokenOrigin).balanceOf(address(this));\\n        if (leftOver > 0) {\\n            // return the leftover of _erc20TokenOrigin\\n            TransferHelper.safeTransfer(_erc20TokenOrigin, msg.sender, leftOver);\\n        }\\n        return totalAmountIn;\\n    }\\n\\n    /**\\n     * Perform the payments to the given addresses and amounts, public method.\\n     * @param _payments The array of the Payment data.\\n     */\\n    function performMultiPayment(Payment[] calldata _payments) external payable nonReentrant {\\n        _performMultiPayment(_payments);\\n    }\\n\\n    /**\\n     * Perform the payments to the given addresses and amounts, internal method.\\n     * @param _payments The array of the Payment data.\\n     */\\n    function _performMultiPayment(Payment[] calldata _payments) internal {\\n        uint256 totalETHSent = 0;\\n        for (uint256 i = 0; i < _payments.length; i++) {\\n            require(_payments[i].amountsToTransfer.length > 0, \\\"Payroll: No amounts to transfer\\\");\\n            require(\\n                _payments[i].amountsToTransfer.length == _payments[i].receivers.length,\\n                \\\"Payroll: Arrays must have same length\\\"\\n            );\\n\\n            if (_payments[i].token != address(0)) {\\n                _performERC20Payment(_payments[i].token, _payments[i].receivers, _payments[i].amountsToTransfer);\\n            } else {\\n                totalETHSent =\\n                    totalETHSent +\\n                    _performETHPayment(_payments[i].token, _payments[i].receivers, _payments[i].amountsToTransfer);\\n            }\\n        }\\n\\n        uint256 leftOver = msg.value - totalETHSent;\\n        if (leftOver > 1) {\\n            (bool success, ) = payable(msg.sender).call{value: leftOver}(\\\"\\\");\\n            require(success, \\\"Payroll: ETH leftOver transfer failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * Performs the ERC20 payment to the given addresses.\\n     * @param _erc20TokenAddress The address of the ERC20 token to transfer.\\n     * @param _receivers The array of payment receivers.\\n     * @param _amountsToTransfer The array of payments' amounts to perform.\\n     * The amount will be transfered to the address on _receivers with the same index.\\n     */\\n    function _performERC20Payment(\\n        address _erc20TokenAddress,\\n        address[] calldata _receivers,\\n        uint256[] calldata _amountsToTransfer\\n    ) internal {\\n        uint256 acumulatedFee = 0;\\n        uint256 totalAmountSent = 0;\\n\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            require(_receivers[i] != address(0), \\\"Payroll: Cannot send to a 0 address\\\");\\n            totalAmountSent = totalAmountSent + _amountsToTransfer[i];\\n            TransferHelper.safeTransferFrom(_erc20TokenAddress, msg.sender, _receivers[i], _amountsToTransfer[i]);\\n        }\\n        emit BatchPayment(_erc20TokenAddress, _receivers, _amountsToTransfer);\\n\\n        acumulatedFee = (totalAmountSent * fee) / MANTISSA;\\n        if (acumulatedFee > 0) {\\n            TransferHelper.safeTransferFrom(_erc20TokenAddress, msg.sender, feeAddress, acumulatedFee);\\n        }\\n        emit FeeCharged(_erc20TokenAddress, feeAddress, acumulatedFee);\\n    }\\n\\n    /**\\n     * Performs the ETH payment to the given addresses.\\n     * @param _receivers The array of payment receivers.\\n     * @param _amountsToTransfer The array of payments' amounts to perform.\\n     * The amount will be transfered to the address on _receivers with the same index.\\n     */\\n    function _performETHPayment(\\n        address _erc20TokenAddress,\\n        address[] calldata _receivers,\\n        uint256[] calldata _amountsToTransfer\\n    ) internal returns (uint256) {\\n        uint256 acumulatedFee = 0;\\n        uint256 totalAmountSent = 0;\\n\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            require(_receivers[i] != address(0), \\\"Payroll: Cannot send to a 0 address\\\");\\n            totalAmountSent = totalAmountSent + _amountsToTransfer[i];\\n\\n            (bool success, ) = payable(_receivers[i]).call{value: _amountsToTransfer[i]}(\\\"\\\");\\n            require(success, \\\"Payroll: ETH transfer failed\\\");\\n        }\\n        emit BatchPayment(_erc20TokenAddress, _receivers, _amountsToTransfer);\\n\\n        acumulatedFee = (totalAmountSent * fee) / MANTISSA;\\n        if (acumulatedFee > 0) {\\n            totalAmountSent = totalAmountSent + acumulatedFee;\\n            (bool success, ) = payable(feeAddress).call{value: acumulatedFee}(\\\"\\\");\\n            require(success, \\\"Payroll: ETH fee transfer failed\\\");\\n        }\\n        emit FeeCharged(_erc20TokenAddress, feeAddress, acumulatedFee);\\n\\n        return totalAmountSent;\\n    }\\n}\\n\",\"keccak256\":\"0x588de8e99efe54b2c3d813bb096bb05cb133a7f8397f90c7c460a547f6056a6f\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IERC20Basic.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n */\\ninterface IERC20Basic {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3c0c04761983cc5575bb5a14f1770526759be908a37ae9daf0ca669de1933756\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IUniswap.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title UniswapV2\\n * @dev Simpler version of Uniswap v2 and v3 protocol interface\\n */\\ninterface IUniswapV2 {\\n    //Uniswap V2\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\n/**\\n * @title UniswapV2\\n * @dev Simpler version of Uniswap v2 and v3 protocol interface\\n */\\ninterface IUniswapV3 {\\n    //UniswapV3\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x520ba6f148709362aae39799567086031478ee08f7bb1f3df9dcbd28a3db89f5\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612802806100206000396000f3fe60806040526004361061011f5760003560e01c80638da5cb5b116100a0578063db9d033411610064578063db9d0334146102fc578063ddca3f431461030f578063ef6aa26414610325578063f2fde38b14610345578063f65a83cf1461036557600080fd5b80638da5cb5b1461026b5780639272148214610289578063ac43070b1461029c578063c31c9c07146102bc578063d8ca7236146102dc57600080fd5b806354fd4d50116100e757806354fd4d50146101e057806369fe0e2d146101f6578063715018a6146102165780638705fcd41461022b578063887a622a1461024b57600080fd5b80632171dcc9146101245780632703984c14610146578063395ae6a314610175578063408def1e1461018857806341275358146101a8575b600080fd5b34801561013057600080fd5b5061014461013f366004612030565b61038f565b005b34801561015257600080fd5b50610162670de0b6b3a764000081565b6040519081526020015b60405180910390f35b6101446101833660046120c7565b6103d0565b34801561019457600080fd5b506101446101a3366004612162565b610471565b3480156101b457600080fd5b506098546101c8906001600160a01b031681565b6040516001600160a01b03909116815260200161016c565b3480156101ec57600080fd5b50610162609a5481565b34801561020257600080fd5b50610144610211366004612162565b6104a7565b34801561022257600080fd5b506101446104da565b34801561023757600080fd5b5061014461024636600461217b565b610510565b34801561025757600080fd5b5061016261026636600461219d565b610543565b34801561027757600080fd5b506033546001600160a01b03166101c8565b6101446102973660046120c7565b610618565b3480156102a857600080fd5b506101446102b736600461220c565b61069e565b3480156102c857600080fd5b506097546101c8906001600160a01b031681565b3480156102e857600080fd5b506101626102f736600461219d565b61072b565b61014461030a36600461220c565b6107f2565b34801561031b57600080fd5b5061016260995481565b34801561033157600080fd5b5061014461034036600461224e565b61082d565b34801561035157600080fd5b5061014461036036600461217b565b610920565b34801561037157600080fd5b50609b5461037f9060ff1681565b604051901515815260200161016c565b6033546001600160a01b031633146103c25760405162461bcd60e51b81526004016103b99061229b565b60405180910390fd5b6103cc82826109b8565b5050565b600260655414156103f35760405162461bcd60e51b81526004016103b9906122d0565b6002606555609b5460ff16156104445760405162461bcd60e51b8152602060048201526016602482015275506179726f6c6c3a204e6f7420756e6973776170563360501b60448201526064016103b9565b8215610459576104578787878787610a91565b505b6104638282610def565b505060016065555050505050565b6033546001600160a01b0316331461049b5760405162461bcd60e51b81526004016103b99061229b565b6104a4816111a7565b50565b6033546001600160a01b031633146104d15760405162461bcd60e51b81526004016103b99061229b565b6104a481611233565b6033546001600160a01b031633146105045760405162461bcd60e51b81526004016103b99061229b565b61050e60006112ca565b565b6033546001600160a01b0316331461053a5760405162461bcd60e51b81526004016103b99061229b565b6104a48161131c565b6000600260655414156105685760405162461bcd60e51b81526004016103b9906122d0565b6002606555609b5460ff166105b85760405162461bcd60e51b81526020600482015260166024820152752830bcb937b6361d102737ba103ab734b9bbb0b82b1960511b60448201526064016103b9565b816105fc5760405162461bcd60e51b8152602060048201526014602482015273506179726f6c6c3a20456d70747920737761707360601b60448201526064016103b9565b61060986868686866113c0565b60016065559695505050505050565b6002606554141561063b5760405162461bcd60e51b81526004016103b9906122d0565b6002606555609b5460ff1661068b5760405162461bcd60e51b81526020600482015260166024820152752830bcb937b6361d102737ba103ab734b9bbb0b82b1960511b60448201526064016103b9565b82156104595761045787878787876113c0565b600260655414156106c15760405162461bcd60e51b81526004016103b9906122d0565b600260655560005b818110156107215761070f8383838181106106e6576106e6612307565b90506020020160208101906106fb919061217b565b6097546001600160a01b03166000196116fc565b8061071981612333565b9150506106c9565b5050600160655550565b6000600260655414156107505760405162461bcd60e51b81526004016103b9906122d0565b6002606555609b5460ff16156107a15760405162461bcd60e51b8152602060048201526016602482015275506179726f6c6c3a204e6f7420756e6973776170563360501b60448201526064016103b9565b816107e55760405162461bcd60e51b8152602060048201526014602482015273506179726f6c6c3a20456d70747920737761707360601b60448201526064016103b9565b6106098686868686610a91565b600260655414156108155760405162461bcd60e51b81526004016103b9906122d0565b60026065556108248282610def565b50506001606555565b600054610100900460ff166108485760005460ff161561084c565b303b155b6108af5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103b9565b600054610100900460ff161580156108d1576000805461ffff19166101011790555b6108d96117f5565b6108e1611824565b6108eb85856109b8565b6108f48361131c565b6108fd82611233565b61090760016111a7565b8015610919576000805461ff00191690555b5050505050565b6033546001600160a01b0316331461094a5760405162461bcd60e51b81526004016103b99061229b565b6001600160a01b0381166109af5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b9565b6104a4816112ca565b6001600160a01b038216610a245760405162461bcd60e51b815260206004820152602d60248201527f506179726f6c6c3a2043616e6e6f74207365742061203020616464726573732060448201526c30b99039bbb0b82937baba32b960991b60648201526084016103b9565b609b805460ff1916821515908117909155609780546001600160a01b0319166001600160a01b0385169081179091556040805191825260208201929092527fa93750f85ffdb877ffb446c32e8a1033c18e7746ffdd0b42d7edee2c98e7db3c910160405180910390a15050565b6000610a9f86333088611853565b6000805b83811015610d56576000858583818110610abf57610abf612307565b9050602002810190610ad1919061234e565b610adf90604081019061236e565b905011610b245760405162461bcd60e51b81526020600482015260136024820152720a0c2f2e4ded8d874408adae0e8f240e0c2e8d606b1b60448201526064016103b9565b6097546040805160a081019091526000916001600160a01b03169063f28c04989080898987818110610b5857610b58612307565b9050602002810190610b6a919061234e565b610b7890604081019061236e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602082015263ffffffff8b166040820152606001898987818110610bd657610bd6612307565b9050602002810190610be8919061234e565b358152602001898987818110610c0057610c00612307565b9050602002810190610c12919061234e565b602001358152506040518263ffffffff1660e01b8152600401610c3591906123e1565b602060405180830381600087803b158015610c4f57600080fd5b505af1158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c879190612450565b9050610c938184612469565b92507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b5689610d2b6000898987818110610cce57610cce612307565b9050602002810190610ce0919061234e565b610cee90604081019061236e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506119619050565b83604051610d3b93929190612481565b60405180910390a15080610d4e81612333565b915050610aa3565b506040516370a0823160e01b81523060048201526000906001600160a01b038916906370a082319060240160206040518083038186803b158015610d9957600080fd5b505afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd19190612450565b90508015610de457610de4883383611a15565b509695505050505050565b6000805b828110156110e3576000848483818110610e0f57610e0f612307565b9050602002810190610e21919061234e565b610e2f9060408101906124a5565b905011610e7e5760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a204e6f20616d6f756e747320746f207472616e736665720060448201526064016103b9565b838382818110610e9057610e90612307565b9050602002810190610ea2919061234e565b610eb09060208101906124a5565b9050848483818110610ec457610ec4612307565b9050602002810190610ed6919061234e565b610ee49060408101906124a5565b905014610f415760405162461bcd60e51b815260206004820152602560248201527f506179726f6c6c3a20417272617973206d75737420686176652073616d65206c6044820152640cadccee8d60db1b60648201526084016103b9565b6000848483818110610f5557610f55612307565b9050602002810190610f67919061234e565b610f7590602081019061217b565b6001600160a01b03161461102657611021848483818110610f9857610f98612307565b9050602002810190610faa919061234e565b610fb890602081019061217b565b858584818110610fca57610fca612307565b9050602002810190610fdc919061234e565b610fea9060208101906124a5565b878786818110610ffc57610ffc612307565b905060200281019061100e919061234e565b61101c9060408101906124a5565b611b0e565b6110d1565b6110c484848381811061103b5761103b612307565b905060200281019061104d919061234e565b61105b90602081019061217b565b85858481811061106d5761106d612307565b905060200281019061107f919061234e565b61108d9060208101906124a5565b87878681811061109f5761109f612307565b90506020028101906110b1919061234e565b6110bf9060408101906124a5565b611cc1565b6110ce9083612469565b91505b806110db81612333565b915050610df3565b5060006110f082346124ef565b905060018111156111a157604051600090339083908381818185875af1925050503d806000811461113d576040519150601f19603f3d011682016040523d82523d6000602084013e611142565b606091505b50509050806109195760405162461bcd60e51b815260206004820152602560248201527f506179726f6c6c3a20455448206c6566744f766572207472616e736665722066604482015264185a5b195960da1b60648201526084016103b9565b50505050565b600081116111f75760405162461bcd60e51b815260206004820152601b60248201527f506179726f6c6c3a2056657273696f6e2063616e27742062652030000000000060448201526064016103b9565b609a8190556040518181527fd559f56ba9b2c69da3765a6d0208c7f7f352ade55a3be7fb9589ba50aa4ce5f3906020015b60405180910390a150565b666a94d74f43000081106112955760405162461bcd60e51b815260206004820152602360248201527f506179726f6c6c3a204665652073686f756c64206265206c657373207468616e60448201526220332560e81b60648201526084016103b9565b60998190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c390602001611228565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166113725760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a2046656520616464726573732063616e277420626520300060448201526064016103b9565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1e93c69f2847f79bfa4d71704aaa84a581729b4b1706d922ee42ba1848a45c990602001611228565b60006113ce86333088611853565b6000805b83811015610d565760008585838181106113ee576113ee612307565b9050602002810190611400919061234e565b61140e9060408101906124a5565b9050116114535760405162461bcd60e51b81526020600482015260136024820152720a0c2f2e4ded8d874408adae0e8f240e0c2e8d606b1b60448201526064016103b9565b876001600160a01b031685858381811061146f5761146f612307565b9050602002810190611481919061234e565b61148f9060408101906124a5565b60008181106114a0576114a0612307565b90506020020160208101906114b5919061217b565b6001600160a01b03161461150b5760405162461bcd60e51b815260206004820152601e60248201527f506179726f6c6c3a2053776170206e6f7420746f6b656e206f726967696e000060448201526064016103b9565b6097546000906001600160a01b0316638803dbee87878581811061153157611531612307565b9050602002810190611543919061234e565b3588888681811061155657611556612307565b9050602002810190611568919061234e565b6020013589898781811061157e5761157e612307565b9050602002810190611590919061234e565b61159e9060408101906124a5565b338d6040518763ffffffff1660e01b81526004016115c19695949392919061254d565b600060405180830381600087803b1580156115db57600080fd5b505af11580156115ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261161791908101906125ac565b60008151811061162957611629612307565b60200260200101519050808361163f9190612469565b925036600087878581811061165657611656612307565b9050602002810190611668919061234e565b6116769060408101906124a5565b90925090507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b568b83836116aa6001826124ef565b8181106116b9576116b9612307565b90506020020160208101906116ce919061217b565b856040516116de93929190612481565b60405180910390a150505080806116f490612333565b9150506113d2565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691611758919061266a565b6000604051808303816000865af19150503d8060008114611795576040519150601f19603f3d011682016040523d82523d6000602084013e61179a565b606091505b50915091508180156117c45750805115806117c45750808060200190518101906117c4919061267c565b6109195760405162461bcd60e51b8152602060048201526002602482015261534160f01b60448201526064016103b9565b600054610100900460ff1661181c5760405162461bcd60e51b81526004016103b990612699565b61050e611fa8565b600054610100900460ff1661184b5760405162461bcd60e51b81526004016103b990612699565b61050e611fd6565b600080856001600160a01b03166323b872dd60e01b86868660405160240161187d93929190612481565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516118bb919061266a565b6000604051808303816000865af19150503d80600081146118f8576040519150601f19603f3d011682016040523d82523d6000602084013e6118fd565b606091505b5091509150818015611927575080511580611927575080806020019051810190611927919061267c565b6119595760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b60448201526064016103b9565b505050505050565b60008161196f816014612469565b10156119b25760405162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b60448201526064016103b9565b6119bd826014612469565b83511015611a055760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016103b9565b500160200151600160601b900490565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611a71919061266a565b6000604051808303816000865af19150503d8060008114611aae576040519150601f19603f3d011682016040523d82523d6000602084013e611ab3565b606091505b5091509150818015611add575080511580611add575080806020019051810190611add919061267c565b6109195760405162461bcd60e51b815260206004820152600260248201526114d560f21b60448201526064016103b9565b60008060005b85811015611bee576000878783818110611b3057611b30612307565b9050602002016020810190611b45919061217b565b6001600160a01b03161415611b6c5760405162461bcd60e51b81526004016103b9906126e4565b848482818110611b7e57611b7e612307565b9050602002013582611b909190612469565b9150611bdc8833898985818110611ba957611ba9612307565b9050602002016020810190611bbe919061217b565b888886818110611bd057611bd0612307565b90506020020135611853565b80611be681612333565b915050611b14565b507f61296616dea919da05ed0d5608a730a6f4f39d0703b9d8819da47e233c9a92d98787878787604051611c26959493929190612727565b60405180910390a1670de0b6b3a764000060995482611c45919061278b565b611c4f91906127aa565b91508115611c7157609854611c7190889033906001600160a01b031685611853565b6098546040517f945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d91611cb0918a916001600160a01b0316908690612481565b60405180910390a150505050505050565b60008080805b86811015611e39576000888883818110611ce357611ce3612307565b9050602002016020810190611cf8919061217b565b6001600160a01b03161415611d1f5760405162461bcd60e51b81526004016103b9906126e4565b858582818110611d3157611d31612307565b9050602002013582611d439190612469565b91506000888883818110611d5957611d59612307565b9050602002016020810190611d6e919061217b565b6001600160a01b0316878784818110611d8957611d89612307565b9050602002013560405160006040518083038185875af1925050503d8060008114611dd0576040519150601f19603f3d011682016040523d82523d6000602084013e611dd5565b606091505b5050905080611e265760405162461bcd60e51b815260206004820152601c60248201527f506179726f6c6c3a20455448207472616e73666572206661696c65640000000060448201526064016103b9565b5080611e3181612333565b915050611cc7565b507f61296616dea919da05ed0d5608a730a6f4f39d0703b9d8819da47e233c9a92d98888888888604051611e71959493929190612727565b60405180910390a1670de0b6b3a764000060995482611e90919061278b565b611e9a91906127aa565b91508115611f5657611eac8282612469565b6098546040519192506000916001600160a01b039091169084908381818185875af1925050503d8060008114611efe576040519150601f19603f3d011682016040523d82523d6000602084013e611f03565b606091505b5050905080611f545760405162461bcd60e51b815260206004820181905260248201527f506179726f6c6c3a2045544820666565207472616e73666572206661696c656460448201526064016103b9565b505b6098546040517f945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d91611f95918b916001600160a01b0316908690612481565b60405180910390a1979650505050505050565b600054610100900460ff16611fcf5760405162461bcd60e51b81526004016103b990612699565b6001606555565b600054610100900460ff16611ffd5760405162461bcd60e51b81526004016103b990612699565b61050e336112ca565b80356001600160a01b038116811461201d57600080fd5b919050565b80151581146104a457600080fd5b6000806040838503121561204357600080fd5b61204c83612006565b9150602083013561205c81612022565b809150509250929050565b803563ffffffff8116811461201d57600080fd5b60008083601f84011261208d57600080fd5b50813567ffffffffffffffff8111156120a557600080fd5b6020830191508360208260051b85010111156120c057600080fd5b9250929050565b600080600080600080600060a0888a0312156120e257600080fd5b6120eb88612006565b96506020880135955061210060408901612067565b9450606088013567ffffffffffffffff8082111561211d57600080fd5b6121298b838c0161207b565b909650945060808a013591508082111561214257600080fd5b5061214f8a828b0161207b565b989b979a50959850939692959293505050565b60006020828403121561217457600080fd5b5035919050565b60006020828403121561218d57600080fd5b61219682612006565b9392505050565b6000806000806000608086880312156121b557600080fd5b6121be86612006565b9450602086013593506121d360408701612067565b9250606086013567ffffffffffffffff8111156121ef57600080fd5b6121fb8882890161207b565b969995985093965092949392505050565b6000806020838503121561221f57600080fd5b823567ffffffffffffffff81111561223657600080fd5b6122428582860161207b565b90969095509350505050565b6000806000806080858703121561226457600080fd5b61226d85612006565b9350602085013561227d81612022565b925061228b60408601612006565b9396929550929360600135925050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156123475761234761231d565b5060010190565b60008235605e1983360301811261236457600080fd5b9190910192915050565b6000808335601e1984360301811261238557600080fd5b83018035915067ffffffffffffffff8211156123a057600080fd5b6020019150368190038213156120c057600080fd5b60005b838110156123d05781810151838201526020016123b8565b838111156111a15750506000910152565b602081526000825160a0602084015280518060c08501526124098160e08601602085016123b5565b60018060a01b0360208601511660408501526040850151606085015260608501516080850152608085015160a085015260e0601f19601f8301168501019250505092915050565b60006020828403121561246257600080fd5b5051919050565b6000821982111561247c5761247c61231d565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000808335601e198436030181126124bc57600080fd5b83018035915067ffffffffffffffff8211156124d757600080fd5b6020019150600581901b36038213156120c057600080fd5b6000828210156125015761250161231d565b500390565b8183526000602080850194508260005b85811015612542576001600160a01b0361252f83612006565b1687529582019590820190600101612516565b509495945050505050565b86815285602082015260a06040820152600061256d60a083018688612506565b6001600160a01b039490941660608301525063ffffffff91909116608090910152949350505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156125bf57600080fd5b825167ffffffffffffffff808211156125d757600080fd5b818501915085601f8301126125eb57600080fd5b8151818111156125fd576125fd612596565b8060051b604051601f19603f8301168101818110858211171561262257612622612596565b60405291825284820192508381018501918883111561264057600080fd5b938501935b8285101561265e57845184529385019392850192612645565b98975050505050505050565b600082516123648184602087016123b5565b60006020828403121561268e57600080fd5b815161219681612022565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526023908201527f506179726f6c6c3a2043616e6e6f742073656e6420746f20612030206164647260408201526265737360e81b606082015260800190565b6001600160a01b038616815260606020820181905260009061274c9083018688612506565b82810360408401528381526001600160fb1b0384111561276b57600080fd5b8360051b8086602084013760009101602001908152979650505050505050565b60008160001904831182151516156127a5576127a561231d565b500290565b6000826127c757634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ffb8643a6383275f1b1b05951cfb5bbe8067f8d5a723e542e1e556398d5c4e9364736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c80638da5cb5b116100a0578063db9d033411610064578063db9d0334146102fc578063ddca3f431461030f578063ef6aa26414610325578063f2fde38b14610345578063f65a83cf1461036557600080fd5b80638da5cb5b1461026b5780639272148214610289578063ac43070b1461029c578063c31c9c07146102bc578063d8ca7236146102dc57600080fd5b806354fd4d50116100e757806354fd4d50146101e057806369fe0e2d146101f6578063715018a6146102165780638705fcd41461022b578063887a622a1461024b57600080fd5b80632171dcc9146101245780632703984c14610146578063395ae6a314610175578063408def1e1461018857806341275358146101a8575b600080fd5b34801561013057600080fd5b5061014461013f366004612030565b61038f565b005b34801561015257600080fd5b50610162670de0b6b3a764000081565b6040519081526020015b60405180910390f35b6101446101833660046120c7565b6103d0565b34801561019457600080fd5b506101446101a3366004612162565b610471565b3480156101b457600080fd5b506098546101c8906001600160a01b031681565b6040516001600160a01b03909116815260200161016c565b3480156101ec57600080fd5b50610162609a5481565b34801561020257600080fd5b50610144610211366004612162565b6104a7565b34801561022257600080fd5b506101446104da565b34801561023757600080fd5b5061014461024636600461217b565b610510565b34801561025757600080fd5b5061016261026636600461219d565b610543565b34801561027757600080fd5b506033546001600160a01b03166101c8565b6101446102973660046120c7565b610618565b3480156102a857600080fd5b506101446102b736600461220c565b61069e565b3480156102c857600080fd5b506097546101c8906001600160a01b031681565b3480156102e857600080fd5b506101626102f736600461219d565b61072b565b61014461030a36600461220c565b6107f2565b34801561031b57600080fd5b5061016260995481565b34801561033157600080fd5b5061014461034036600461224e565b61082d565b34801561035157600080fd5b5061014461036036600461217b565b610920565b34801561037157600080fd5b50609b5461037f9060ff1681565b604051901515815260200161016c565b6033546001600160a01b031633146103c25760405162461bcd60e51b81526004016103b99061229b565b60405180910390fd5b6103cc82826109b8565b5050565b600260655414156103f35760405162461bcd60e51b81526004016103b9906122d0565b6002606555609b5460ff16156104445760405162461bcd60e51b8152602060048201526016602482015275506179726f6c6c3a204e6f7420756e6973776170563360501b60448201526064016103b9565b8215610459576104578787878787610a91565b505b6104638282610def565b505060016065555050505050565b6033546001600160a01b0316331461049b5760405162461bcd60e51b81526004016103b99061229b565b6104a4816111a7565b50565b6033546001600160a01b031633146104d15760405162461bcd60e51b81526004016103b99061229b565b6104a481611233565b6033546001600160a01b031633146105045760405162461bcd60e51b81526004016103b99061229b565b61050e60006112ca565b565b6033546001600160a01b0316331461053a5760405162461bcd60e51b81526004016103b99061229b565b6104a48161131c565b6000600260655414156105685760405162461bcd60e51b81526004016103b9906122d0565b6002606555609b5460ff166105b85760405162461bcd60e51b81526020600482015260166024820152752830bcb937b6361d102737ba103ab734b9bbb0b82b1960511b60448201526064016103b9565b816105fc5760405162461bcd60e51b8152602060048201526014602482015273506179726f6c6c3a20456d70747920737761707360601b60448201526064016103b9565b61060986868686866113c0565b60016065559695505050505050565b6002606554141561063b5760405162461bcd60e51b81526004016103b9906122d0565b6002606555609b5460ff1661068b5760405162461bcd60e51b81526020600482015260166024820152752830bcb937b6361d102737ba103ab734b9bbb0b82b1960511b60448201526064016103b9565b82156104595761045787878787876113c0565b600260655414156106c15760405162461bcd60e51b81526004016103b9906122d0565b600260655560005b818110156107215761070f8383838181106106e6576106e6612307565b90506020020160208101906106fb919061217b565b6097546001600160a01b03166000196116fc565b8061071981612333565b9150506106c9565b5050600160655550565b6000600260655414156107505760405162461bcd60e51b81526004016103b9906122d0565b6002606555609b5460ff16156107a15760405162461bcd60e51b8152602060048201526016602482015275506179726f6c6c3a204e6f7420756e6973776170563360501b60448201526064016103b9565b816107e55760405162461bcd60e51b8152602060048201526014602482015273506179726f6c6c3a20456d70747920737761707360601b60448201526064016103b9565b6106098686868686610a91565b600260655414156108155760405162461bcd60e51b81526004016103b9906122d0565b60026065556108248282610def565b50506001606555565b600054610100900460ff166108485760005460ff161561084c565b303b155b6108af5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103b9565b600054610100900460ff161580156108d1576000805461ffff19166101011790555b6108d96117f5565b6108e1611824565b6108eb85856109b8565b6108f48361131c565b6108fd82611233565b61090760016111a7565b8015610919576000805461ff00191690555b5050505050565b6033546001600160a01b0316331461094a5760405162461bcd60e51b81526004016103b99061229b565b6001600160a01b0381166109af5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b9565b6104a4816112ca565b6001600160a01b038216610a245760405162461bcd60e51b815260206004820152602d60248201527f506179726f6c6c3a2043616e6e6f74207365742061203020616464726573732060448201526c30b99039bbb0b82937baba32b960991b60648201526084016103b9565b609b805460ff1916821515908117909155609780546001600160a01b0319166001600160a01b0385169081179091556040805191825260208201929092527fa93750f85ffdb877ffb446c32e8a1033c18e7746ffdd0b42d7edee2c98e7db3c910160405180910390a15050565b6000610a9f86333088611853565b6000805b83811015610d56576000858583818110610abf57610abf612307565b9050602002810190610ad1919061234e565b610adf90604081019061236e565b905011610b245760405162461bcd60e51b81526020600482015260136024820152720a0c2f2e4ded8d874408adae0e8f240e0c2e8d606b1b60448201526064016103b9565b6097546040805160a081019091526000916001600160a01b03169063f28c04989080898987818110610b5857610b58612307565b9050602002810190610b6a919061234e565b610b7890604081019061236e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602082015263ffffffff8b166040820152606001898987818110610bd657610bd6612307565b9050602002810190610be8919061234e565b358152602001898987818110610c0057610c00612307565b9050602002810190610c12919061234e565b602001358152506040518263ffffffff1660e01b8152600401610c3591906123e1565b602060405180830381600087803b158015610c4f57600080fd5b505af1158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c879190612450565b9050610c938184612469565b92507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b5689610d2b6000898987818110610cce57610cce612307565b9050602002810190610ce0919061234e565b610cee90604081019061236e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506119619050565b83604051610d3b93929190612481565b60405180910390a15080610d4e81612333565b915050610aa3565b506040516370a0823160e01b81523060048201526000906001600160a01b038916906370a082319060240160206040518083038186803b158015610d9957600080fd5b505afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd19190612450565b90508015610de457610de4883383611a15565b509695505050505050565b6000805b828110156110e3576000848483818110610e0f57610e0f612307565b9050602002810190610e21919061234e565b610e2f9060408101906124a5565b905011610e7e5760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a204e6f20616d6f756e747320746f207472616e736665720060448201526064016103b9565b838382818110610e9057610e90612307565b9050602002810190610ea2919061234e565b610eb09060208101906124a5565b9050848483818110610ec457610ec4612307565b9050602002810190610ed6919061234e565b610ee49060408101906124a5565b905014610f415760405162461bcd60e51b815260206004820152602560248201527f506179726f6c6c3a20417272617973206d75737420686176652073616d65206c6044820152640cadccee8d60db1b60648201526084016103b9565b6000848483818110610f5557610f55612307565b9050602002810190610f67919061234e565b610f7590602081019061217b565b6001600160a01b03161461102657611021848483818110610f9857610f98612307565b9050602002810190610faa919061234e565b610fb890602081019061217b565b858584818110610fca57610fca612307565b9050602002810190610fdc919061234e565b610fea9060208101906124a5565b878786818110610ffc57610ffc612307565b905060200281019061100e919061234e565b61101c9060408101906124a5565b611b0e565b6110d1565b6110c484848381811061103b5761103b612307565b905060200281019061104d919061234e565b61105b90602081019061217b565b85858481811061106d5761106d612307565b905060200281019061107f919061234e565b61108d9060208101906124a5565b87878681811061109f5761109f612307565b90506020028101906110b1919061234e565b6110bf9060408101906124a5565b611cc1565b6110ce9083612469565b91505b806110db81612333565b915050610df3565b5060006110f082346124ef565b905060018111156111a157604051600090339083908381818185875af1925050503d806000811461113d576040519150601f19603f3d011682016040523d82523d6000602084013e611142565b606091505b50509050806109195760405162461bcd60e51b815260206004820152602560248201527f506179726f6c6c3a20455448206c6566744f766572207472616e736665722066604482015264185a5b195960da1b60648201526084016103b9565b50505050565b600081116111f75760405162461bcd60e51b815260206004820152601b60248201527f506179726f6c6c3a2056657273696f6e2063616e27742062652030000000000060448201526064016103b9565b609a8190556040518181527fd559f56ba9b2c69da3765a6d0208c7f7f352ade55a3be7fb9589ba50aa4ce5f3906020015b60405180910390a150565b666a94d74f43000081106112955760405162461bcd60e51b815260206004820152602360248201527f506179726f6c6c3a204665652073686f756c64206265206c657373207468616e60448201526220332560e81b60648201526084016103b9565b60998190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c390602001611228565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166113725760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a2046656520616464726573732063616e277420626520300060448201526064016103b9565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1e93c69f2847f79bfa4d71704aaa84a581729b4b1706d922ee42ba1848a45c990602001611228565b60006113ce86333088611853565b6000805b83811015610d565760008585838181106113ee576113ee612307565b9050602002810190611400919061234e565b61140e9060408101906124a5565b9050116114535760405162461bcd60e51b81526020600482015260136024820152720a0c2f2e4ded8d874408adae0e8f240e0c2e8d606b1b60448201526064016103b9565b876001600160a01b031685858381811061146f5761146f612307565b9050602002810190611481919061234e565b61148f9060408101906124a5565b60008181106114a0576114a0612307565b90506020020160208101906114b5919061217b565b6001600160a01b03161461150b5760405162461bcd60e51b815260206004820152601e60248201527f506179726f6c6c3a2053776170206e6f7420746f6b656e206f726967696e000060448201526064016103b9565b6097546000906001600160a01b0316638803dbee87878581811061153157611531612307565b9050602002810190611543919061234e565b3588888681811061155657611556612307565b9050602002810190611568919061234e565b6020013589898781811061157e5761157e612307565b9050602002810190611590919061234e565b61159e9060408101906124a5565b338d6040518763ffffffff1660e01b81526004016115c19695949392919061254d565b600060405180830381600087803b1580156115db57600080fd5b505af11580156115ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261161791908101906125ac565b60008151811061162957611629612307565b60200260200101519050808361163f9190612469565b925036600087878581811061165657611656612307565b9050602002810190611668919061234e565b6116769060408101906124a5565b90925090507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b568b83836116aa6001826124ef565b8181106116b9576116b9612307565b90506020020160208101906116ce919061217b565b856040516116de93929190612481565b60405180910390a150505080806116f490612333565b9150506113d2565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691611758919061266a565b6000604051808303816000865af19150503d8060008114611795576040519150601f19603f3d011682016040523d82523d6000602084013e61179a565b606091505b50915091508180156117c45750805115806117c45750808060200190518101906117c4919061267c565b6109195760405162461bcd60e51b8152602060048201526002602482015261534160f01b60448201526064016103b9565b600054610100900460ff1661181c5760405162461bcd60e51b81526004016103b990612699565b61050e611fa8565b600054610100900460ff1661184b5760405162461bcd60e51b81526004016103b990612699565b61050e611fd6565b600080856001600160a01b03166323b872dd60e01b86868660405160240161187d93929190612481565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516118bb919061266a565b6000604051808303816000865af19150503d80600081146118f8576040519150601f19603f3d011682016040523d82523d6000602084013e6118fd565b606091505b5091509150818015611927575080511580611927575080806020019051810190611927919061267c565b6119595760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b60448201526064016103b9565b505050505050565b60008161196f816014612469565b10156119b25760405162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b60448201526064016103b9565b6119bd826014612469565b83511015611a055760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016103b9565b500160200151600160601b900490565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611a71919061266a565b6000604051808303816000865af19150503d8060008114611aae576040519150601f19603f3d011682016040523d82523d6000602084013e611ab3565b606091505b5091509150818015611add575080511580611add575080806020019051810190611add919061267c565b6109195760405162461bcd60e51b815260206004820152600260248201526114d560f21b60448201526064016103b9565b60008060005b85811015611bee576000878783818110611b3057611b30612307565b9050602002016020810190611b45919061217b565b6001600160a01b03161415611b6c5760405162461bcd60e51b81526004016103b9906126e4565b848482818110611b7e57611b7e612307565b9050602002013582611b909190612469565b9150611bdc8833898985818110611ba957611ba9612307565b9050602002016020810190611bbe919061217b565b888886818110611bd057611bd0612307565b90506020020135611853565b80611be681612333565b915050611b14565b507f61296616dea919da05ed0d5608a730a6f4f39d0703b9d8819da47e233c9a92d98787878787604051611c26959493929190612727565b60405180910390a1670de0b6b3a764000060995482611c45919061278b565b611c4f91906127aa565b91508115611c7157609854611c7190889033906001600160a01b031685611853565b6098546040517f945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d91611cb0918a916001600160a01b0316908690612481565b60405180910390a150505050505050565b60008080805b86811015611e39576000888883818110611ce357611ce3612307565b9050602002016020810190611cf8919061217b565b6001600160a01b03161415611d1f5760405162461bcd60e51b81526004016103b9906126e4565b858582818110611d3157611d31612307565b9050602002013582611d439190612469565b91506000888883818110611d5957611d59612307565b9050602002016020810190611d6e919061217b565b6001600160a01b0316878784818110611d8957611d89612307565b9050602002013560405160006040518083038185875af1925050503d8060008114611dd0576040519150601f19603f3d011682016040523d82523d6000602084013e611dd5565b606091505b5050905080611e265760405162461bcd60e51b815260206004820152601c60248201527f506179726f6c6c3a20455448207472616e73666572206661696c65640000000060448201526064016103b9565b5080611e3181612333565b915050611cc7565b507f61296616dea919da05ed0d5608a730a6f4f39d0703b9d8819da47e233c9a92d98888888888604051611e71959493929190612727565b60405180910390a1670de0b6b3a764000060995482611e90919061278b565b611e9a91906127aa565b91508115611f5657611eac8282612469565b6098546040519192506000916001600160a01b039091169084908381818185875af1925050503d8060008114611efe576040519150601f19603f3d011682016040523d82523d6000602084013e611f03565b606091505b5050905080611f545760405162461bcd60e51b815260206004820181905260248201527f506179726f6c6c3a2045544820666565207472616e73666572206661696c656460448201526064016103b9565b505b6098546040517f945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d91611f95918b916001600160a01b0316908690612481565b60405180910390a1979650505050505050565b600054610100900460ff16611fcf5760405162461bcd60e51b81526004016103b990612699565b6001606555565b600054610100900460ff16611ffd5760405162461bcd60e51b81526004016103b990612699565b61050e336112ca565b80356001600160a01b038116811461201d57600080fd5b919050565b80151581146104a457600080fd5b6000806040838503121561204357600080fd5b61204c83612006565b9150602083013561205c81612022565b809150509250929050565b803563ffffffff8116811461201d57600080fd5b60008083601f84011261208d57600080fd5b50813567ffffffffffffffff8111156120a557600080fd5b6020830191508360208260051b85010111156120c057600080fd5b9250929050565b600080600080600080600060a0888a0312156120e257600080fd5b6120eb88612006565b96506020880135955061210060408901612067565b9450606088013567ffffffffffffffff8082111561211d57600080fd5b6121298b838c0161207b565b909650945060808a013591508082111561214257600080fd5b5061214f8a828b0161207b565b989b979a50959850939692959293505050565b60006020828403121561217457600080fd5b5035919050565b60006020828403121561218d57600080fd5b61219682612006565b9392505050565b6000806000806000608086880312156121b557600080fd5b6121be86612006565b9450602086013593506121d360408701612067565b9250606086013567ffffffffffffffff8111156121ef57600080fd5b6121fb8882890161207b565b969995985093965092949392505050565b6000806020838503121561221f57600080fd5b823567ffffffffffffffff81111561223657600080fd5b6122428582860161207b565b90969095509350505050565b6000806000806080858703121561226457600080fd5b61226d85612006565b9350602085013561227d81612022565b925061228b60408601612006565b9396929550929360600135925050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156123475761234761231d565b5060010190565b60008235605e1983360301811261236457600080fd5b9190910192915050565b6000808335601e1984360301811261238557600080fd5b83018035915067ffffffffffffffff8211156123a057600080fd5b6020019150368190038213156120c057600080fd5b60005b838110156123d05781810151838201526020016123b8565b838111156111a15750506000910152565b602081526000825160a0602084015280518060c08501526124098160e08601602085016123b5565b60018060a01b0360208601511660408501526040850151606085015260608501516080850152608085015160a085015260e0601f19601f8301168501019250505092915050565b60006020828403121561246257600080fd5b5051919050565b6000821982111561247c5761247c61231d565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000808335601e198436030181126124bc57600080fd5b83018035915067ffffffffffffffff8211156124d757600080fd5b6020019150600581901b36038213156120c057600080fd5b6000828210156125015761250161231d565b500390565b8183526000602080850194508260005b85811015612542576001600160a01b0361252f83612006565b1687529582019590820190600101612516565b509495945050505050565b86815285602082015260a06040820152600061256d60a083018688612506565b6001600160a01b039490941660608301525063ffffffff91909116608090910152949350505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156125bf57600080fd5b825167ffffffffffffffff808211156125d757600080fd5b818501915085601f8301126125eb57600080fd5b8151818111156125fd576125fd612596565b8060051b604051601f19603f8301168101818110858211171561262257612622612596565b60405291825284820192508381018501918883111561264057600080fd5b938501935b8285101561265e57845184529385019392850192612645565b98975050505050505050565b600082516123648184602087016123b5565b60006020828403121561268e57600080fd5b815161219681612022565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526023908201527f506179726f6c6c3a2043616e6e6f742073656e6420746f20612030206164647260408201526265737360e81b606082015260800190565b6001600160a01b038616815260606020820181905260009061274c9083018688612506565b82810360408401528381526001600160fb1b0384111561276b57600080fd5b8360051b8086602084013760009101602001908152979650505050505050565b60008160001904831182151516156127a5576127a561231d565b500290565b6000826127c757634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ffb8643a6383275f1b1b05951cfb5bbe8067f8d5a723e542e1e556398d5c4e9364736f6c63430008090033",
  "devdoc": {
    "author": "Think and Dev Team",
    "kind": "dev",
    "methods": {
      "approveTokens(address[])": {
        "params": {
          "_erc20TokenOrigin": "ERC20 token address to approve."
        }
      },
      "initialize(address,bool,address,uint256)": {
        "params": {
          "_isSwapV2": "Boolean to specify the version of the router; true means v2, false means v3.",
          "_swapRouter": "Router address to execute swaps."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performMultiPayment((address,address[],uint256[])[])": {
        "params": {
          "_payments": "The array of the Payment data."
        }
      },
      "performSwapV2(address,uint256,uint32,(uint256,uint256,address[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV2AndPayment(address,uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_payments": "The array of the Payment data.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV3(address,uint256,uint32,(uint256,uint256,bytes)[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV3AndPayment(address,uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_payments": "The array of the Payment data.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256)": {
        "params": {
          "_fee": "Percentage that will be charged."
        }
      },
      "setFeeAddress(address)": {
        "params": {
          "_feeAddress": "Address that will receive the fees."
        }
      },
      "setSwapRouter(address,bool)": {
        "params": {
          "_isSwapV2": "Boolean to specify the version of the router; true means v2, false means v3.",
          "_swapRouter": "Router address to execute swaps."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Think and Dev Paymentbox",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveTokens(address[])": {
        "notice": "Approves the following token to be used on swapRouter"
      },
      "isSwapV2()": {
        "notice": "Returns if the contract is working with a v2 Uniswap protocol; true means v2, false means v3."
      },
      "performMultiPayment((address,address[],uint256[])[])": {
        "notice": "Perform the payments to the given addresses and amounts, public method."
      },
      "performSwapV2(address,uint256,uint32,(uint256,uint256,address[])[])": {
        "notice": "Perform the swap with Uniswap V2 to the given token addresses and amounts."
      },
      "performSwapV2AndPayment(address,uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])": {
        "notice": "Perform the swap with Uniswap V2 and the transfer to the given addresses using Uniswap V2 interface.Currently the function only works with ERC20 tokens."
      },
      "performSwapV3(address,uint256,uint32,(uint256,uint256,bytes)[])": {
        "notice": "Perform the swap with Uniswap V3 to the given token addresses and amounts."
      },
      "performSwapV3AndPayment(address,uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])": {
        "notice": "Perform the swap with Uniswap V3 and the transfer to the given addresses.Currently the function only works with ERC20 tokens."
      },
      "setFee(uint256)": {
        "notice": "Set the fee that will be charged, fees are divided by mantissa"
      },
      "setFeeAddress(address)": {
        "notice": "Set the address that will receive the fees."
      },
      "setSwapRouter(address,bool)": {
        "notice": "Set the SwapRouter and the version to be used."
      },
      "swapRouter()": {
        "notice": "Returns the address of the Uniswap protocol router, it could be v2 or v3."
      }
    },
    "notice": "Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction. Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 211,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3115,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "swapRouter",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 3117,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "feeAddress",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 3119,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "fee",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 3124,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "version",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 3127,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "isSwapV2",
        "offset": 0,
        "slot": "155",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}